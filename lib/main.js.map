{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'LFTNG'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\nMultimix                  = require 'multimix'\n#...........................................................................................................\nfrozen                    = Object.isFrozen\nassign                    = Object.assign\nshallow_freeze            = Object.freeze\nshallow_copy              = ( x, P... ) -> assign ( if Array.isArray x then [] else {} ), x, P...\n{ klona: deep_copy, }     = require 'klona/json'\n\n\n#===========================================================================================================\ndeep_freeze = ( d ) ->\n  ### immediately return for zero, empty string, null, undefined, NaN, false, true: ###\n  return d if ( not d ) or d is true\n  ### thx to https://github.com/lukeed/klona/blob/master/src/json.js ###\n  switch ( Object::toString.call d )\n    when '[object Array]'\n      k = d.length\n      while ( k-- )\n        continue unless ( v = d[ k ] )? and ( ( typeof v ) is 'object' )\n        d[ k ] = deep_freeze v\n      return shallow_freeze d\n    when '[object Object]'\n      for k, v of d\n        continue unless v? and ( ( typeof v ) is 'object' )\n        d[ k ] = deep_freeze v\n      return shallow_freeze d\n  return d\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nfreeze_lets = lets = ( original, modifier ) ->\n  draft = @thaw original\n  modifier draft if modifier?\n  return deep_freeze draft\n\n#-----------------------------------------------------------------------------------------------------------\nfreeze_lets.assign    = ( me, P...  ) -> deep_freeze  deep_copy shallow_copy  me, P...\nfreeze_lets.freeze    = ( me        ) -> deep_freeze                          me\nfreeze_lets.thaw      = ( me        ) ->              deep_copy               me\nfreeze_lets.get       = ( me, k     ) -> me[ k ]\nfreeze_lets.set       = ( me, k, v  ) ->\n  R       = shallow_copy me\n  R[ k ]  = v\n  return shallow_freeze R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nnofreeze_lets = ( original, modifier ) ->\n  draft = @thaw original\n  modifier draft if modifier?\n  ### TAINT do not copy ###\n  return deep_copy draft\n\n#-----------------------------------------------------------------------------------------------------------\nnofreeze_lets.assign  = ( me, P...  ) -> deep_copy shallow_copy me, P...\nnofreeze_lets.freeze  = ( me        ) ->                        me\nnofreeze_lets.thaw    = ( me        ) -> deep_copy              me\nnofreeze_lets.get     = freeze_lets.get\nnofreeze_lets.set     = ( me, k, v  ) ->\n  R       = shallow_copy me\n  R[ k ]  = v\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = { freeze_lets, nofreeze_lets, }\n\n\n\n"
  ]
}